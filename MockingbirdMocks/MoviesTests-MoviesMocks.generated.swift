//
//  MoviesTests-MoviesMocks.generated.swift
//  Movies
//
//  Generated by Mockingbird v0.16.0.
//  DO NOT EDIT
//

@testable import Mockingbird
@testable import Movies
import CoreData
import Foundation
import Swift
import UIKit

private var genericTypesStaticMocks = Mockingbird.Synchronized<[String: Mockingbird.StaticMock]>([:])

// MARK: - Mocked AppDelegate

public final class AppDelegateMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'AppDelegate' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: Movies.AppDelegate.Type, file: StaticString = #file, line: UInt = #line) -> AppDelegateMock {
  fatalError()
}

// MARK: - Mocked HomeDetailInteractorProtocol

public final class HomeDetailInteractorProtocolMock: Movies.HomeDetailInteractorProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked presenter

  public var `presenter`: Movies.HomeDetailPresenterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPresenter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailPresenterProtocol?, Movies.HomeDetailPresenterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPresenter(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailPresenterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailPresenterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }
}

/// Returns a concrete mock of `HomeDetailInteractorProtocol`.
public func mock(_ type: Movies.HomeDetailInteractorProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> HomeDetailInteractorProtocolMock {
  return HomeDetailInteractorProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeDetailInteractor

public final class HomeDetailInteractorMock: Movies.HomeDetailInteractor, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked presenter

  override public var `presenter`: Movies.HomeDetailPresenterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPresenter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailPresenterProtocol?, Movies.HomeDetailPresenterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPresenter(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailPresenterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailPresenterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }
}

/// Returns a concrete mock of `HomeDetailInteractor`.
public func mock(_ type: Movies.HomeDetailInteractor.Type, file: StaticString = #file, line: UInt = #line) -> HomeDetailInteractorMock {
  return HomeDetailInteractorMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeDetailPresenterProtocol

public final class HomeDetailPresenterProtocolMock: Movies.HomeDetailPresenterProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked interactor

  public var `interactor`: Movies.HomeDetailInteractorProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getInteractor() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailInteractorProtocol?, Movies.HomeDetailInteractorProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setInteractor(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailInteractorProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailInteractorProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked movie

  public var `movie`: Movies.Movie { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getMovie() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.Movie, Movies.Movie> { fatalError("See 'Thunk Pruning' in the README") }

  public func setMovie(_ newValue: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.Movie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked router

  public var `router`: Movies.HomeDetailRouterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getRouter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailRouterProtocol?, Movies.HomeDetailRouterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setRouter(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailRouterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailRouterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked view

  public var `view`: Movies.HomeDetailViewProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getView() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailViewProtocol?, Movies.HomeDetailViewProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setView(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailViewProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailViewProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }
}

/// Returns a concrete mock of `HomeDetailPresenterProtocol`.
public func mock(_ type: Movies.HomeDetailPresenterProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> HomeDetailPresenterProtocolMock {
  return HomeDetailPresenterProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeDetailPresenter

public final class HomeDetailPresenterMock: Movies.HomeDetailPresenter, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`movie`: Movies.Movie, __file: StaticString = #file, __line: UInt = #line) -> HomeDetailPresenterMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked interactor

  override public var `interactor`: Movies.HomeDetailInteractorProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getInteractor() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailInteractorProtocol?, Movies.HomeDetailInteractorProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setInteractor(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailInteractorProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailInteractorProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked movie

  override public var `movie`: Movies.Movie { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getMovie() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.Movie, Movies.Movie> { fatalError("See 'Thunk Pruning' in the README") }

  public func setMovie(_ newValue: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.Movie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked router

  override public var `router`: Movies.HomeDetailRouterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getRouter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailRouterProtocol?, Movies.HomeDetailRouterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setRouter(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailRouterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailRouterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked view

  override public var `view`: Movies.HomeDetailViewProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getView() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailViewProtocol?, Movies.HomeDetailViewProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setView(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailViewProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailViewProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`movie`: Movies.Movie)

  public required override init(`movie`: Movies.Movie) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(HomeDetailPresenter.self).initialize(…)`.
public func mock(_ type: Movies.HomeDetailPresenter.Type, file: StaticString = #file, line: UInt = #line) -> HomeDetailPresenterMock.InitializerProxy.Type {
  return HomeDetailPresenterMock.InitializerProxy.self
}

// MARK: - Mocked HomeDetailRouterProtocol

public final class HomeDetailRouterProtocolMock: Movies.HomeDetailRouterProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked entry

  public var `entry`: Movies.EntryPointHomeDetail? { get { fatalError("See 'Thunk Pruning' in the README") } }

  public func getEntry() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.EntryPointHomeDetail?, Movies.EntryPointHomeDetail?> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `start`(`movie`: Movies.Movie)

  public func `start`(`movie`: Movies.Movie) -> Movies.HomeDetailRouterProtocol { fatalError("See 'Thunk Pruning' in the README") }

  public func `start`(`movie`: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.Movie) -> Movies.HomeDetailRouterProtocol, Movies.HomeDetailRouterProtocol> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `HomeDetailRouterProtocol`.
public func mock(_ type: Movies.HomeDetailRouterProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> HomeDetailRouterProtocolMock {
  return HomeDetailRouterProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeDetailRouter

public final class HomeDetailRouterMock: Movies.HomeDetailRouter, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked entry

  override public var `entry`: Movies.EntryPointHomeDetail? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getEntry() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.EntryPointHomeDetail?, Movies.EntryPointHomeDetail?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setEntry(_ newValue: @escaping @autoclosure () -> Movies.EntryPointHomeDetail?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.EntryPointHomeDetail?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `start`(`movie`: Movies.Movie)

  public override func `start`(`movie`: Movies.Movie) -> Movies.HomeDetailRouterProtocol { fatalError("See 'Thunk Pruning' in the README") }

  public func `start`(`movie`: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.Movie) -> Movies.HomeDetailRouterProtocol, Movies.HomeDetailRouterProtocol> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `HomeDetailRouter`.
public func mock(_ type: Movies.HomeDetailRouter.Type, file: StaticString = #file, line: UInt = #line) -> HomeDetailRouterMock {
  return HomeDetailRouterMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeDetailViewController

public final class HomeDetailViewControllerMock: Movies.HomeDetailViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> HomeDetailViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?, __file: StaticString = #file, __line: UInt = #line) -> HomeDetailViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked homePageMovie

  override public var `homePageMovie`: UIKit.UILabel! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getHomePageMovie() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIKit.UILabel, UIKit.UILabel> { fatalError("See 'Thunk Pruning' in the README") }

  public func setHomePageMovie(_ newValue: @escaping @autoclosure () -> UIKit.UILabel) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIKit.UILabel) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked overviewMovie

  override public var `overviewMovie`: UIKit.UILabel! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getOverviewMovie() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIKit.UILabel, UIKit.UILabel> { fatalError("See 'Thunk Pruning' in the README") }

  public func setOverviewMovie(_ newValue: @escaping @autoclosure () -> UIKit.UILabel) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIKit.UILabel) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked posterPath

  override public var `posterPath`: UIImageView! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPosterPath() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIImageView, UIImageView> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPosterPath(_ newValue: @escaping @autoclosure () -> UIImageView) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIImageView) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked presenter

  override public var `presenter`: Movies.HomeDetailPresenterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPresenter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailPresenterProtocol?, Movies.HomeDetailPresenterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPresenter(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailPresenterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailPresenterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked releaseDateMovie

  override public var `releaseDateMovie`: UIKit.UILabel! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getReleaseDateMovie() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIKit.UILabel, UIKit.UILabel> { fatalError("See 'Thunk Pruning' in the README") }

  public func setReleaseDateMovie(_ newValue: @escaping @autoclosure () -> UIKit.UILabel) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIKit.UILabel) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked titleMovie

  override public var `titleMovie`: UIKit.UILabel! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getTitleMovie() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIKit.UILabel, UIKit.UILabel> { fatalError("See 'Thunk Pruning' in the README") }

  public func setTitleMovie(_ newValue: @escaping @autoclosure () -> UIKit.UILabel) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIKit.UILabel) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked voteAverageMovie

  override public var `voteAverageMovie`: UIKit.UILabel! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getVoteAverageMovie() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UIKit.UILabel, UIKit.UILabel> { fatalError("See 'Thunk Pruning' in the README") }

  public func setVoteAverageMovie(_ newValue: @escaping @autoclosure () -> UIKit.UILabel) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UIKit.UILabel) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `cleanDataMovie`()

  public override func `cleanDataMovie`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `cleanDataMovie`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `loadMovie`(`movie`: Movies.Movie)

  public override func `loadMovie`(`movie`: Movies.Movie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `loadMovie`(`movie`: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.Movie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?)

  public required override init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(HomeDetailViewController.self).initialize(…)`.
public func mock(_ type: Movies.HomeDetailViewController.Type, file: StaticString = #file, line: UInt = #line) -> HomeDetailViewControllerMock.InitializerProxy.Type {
  return HomeDetailViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked HomeDetailViewProtocol

public final class HomeDetailViewProtocolMock: Movies.HomeDetailViewProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked presenter

  public var `presenter`: Movies.HomeDetailPresenterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPresenter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeDetailPresenterProtocol?, Movies.HomeDetailPresenterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPresenter(_ newValue: @escaping @autoclosure () -> Movies.HomeDetailPresenterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeDetailPresenterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }
}

/// Returns a concrete mock of `HomeDetailViewProtocol`.
public func mock(_ type: Movies.HomeDetailViewProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> HomeDetailViewProtocolMock {
  return HomeDetailViewProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeInteractorProtocol

public final class HomeInteractorProtocolMock: Movies.HomeInteractorProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked presenter

  public var `presenter`: Movies.HomePresenterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPresenter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomePresenterProtocol?, Movies.HomePresenterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPresenter(_ newValue: @escaping @autoclosure () -> Movies.HomePresenterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomePresenterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getMovies`()

  public func `getMovies`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getMovies`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `getMovieById`(`id`: String)

  public func `getMovieById`(`id`: String) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getMovieById`(`id`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `HomeInteractorProtocol`.
public func mock(_ type: Movies.HomeInteractorProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> HomeInteractorProtocolMock {
  return HomeInteractorProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeInteractor

public final class HomeInteractorMock: Movies.HomeInteractor, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked presenter

  override public var `presenter`: Movies.HomePresenterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPresenter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomePresenterProtocol?, Movies.HomePresenterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPresenter(_ newValue: @escaping @autoclosure () -> Movies.HomePresenterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomePresenterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getMovies`()

  public override func `getMovies`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getMovies`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `getMovieById`(`id`: String)

  public override func `getMovieById`(`id`: String) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getMovieById`(`id`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `HomeInteractor`.
public func mock(_ type: Movies.HomeInteractor.Type, file: StaticString = #file, line: UInt = #line) -> HomeInteractorMock {
  return HomeInteractorMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomePresenterProtocol

public final class HomePresenterProtocolMock: Movies.HomePresenterProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked interactor

  public var `interactor`: Movies.HomeInteractorProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getInteractor() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeInteractorProtocol?, Movies.HomeInteractorProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setInteractor(_ newValue: @escaping @autoclosure () -> Movies.HomeInteractorProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeInteractorProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked router

  public var `router`: Movies.HomeRouterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getRouter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeRouterProtocol?, Movies.HomeRouterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setRouter(_ newValue: @escaping @autoclosure () -> Movies.HomeRouterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeRouterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked view

  public var `view`: Movies.HomeViewProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getView() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeViewProtocol?, Movies.HomeViewProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setView(_ newValue: @escaping @autoclosure () -> Movies.HomeViewProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeViewProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `interactorGetMovie`()

  public func `interactorGetMovie`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `interactorGetMovie`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `interactorDidFetchMoviesError`(`error`: Error)

  public func `interactorDidFetchMoviesError`(`error`: Error) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `interactorDidFetchMoviesError`(`error`: @escaping @autoclosure () -> Error) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Error) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `interactorDidFetchMovies`(`result`: Movies.AllMovie)

  public func `interactorDidFetchMovies`(`result`: Movies.AllMovie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `interactorDidFetchMovies`(`result`: @escaping @autoclosure () -> Movies.AllMovie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.AllMovie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `interactorGetMovieById`(`movie`: Movies.Movie)

  public func `interactorGetMovieById`(`movie`: Movies.Movie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `interactorGetMovieById`(`movie`: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.Movie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `HomePresenterProtocol`.
public func mock(_ type: Movies.HomePresenterProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> HomePresenterProtocolMock {
  return HomePresenterProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomePresenter

public final class HomePresenterMock: Movies.HomePresenter, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked interactor

  override public var `interactor`: Movies.HomeInteractorProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getInteractor() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeInteractorProtocol?, Movies.HomeInteractorProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setInteractor(_ newValue: @escaping @autoclosure () -> Movies.HomeInteractorProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeInteractorProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked router

  override public var `router`: Movies.HomeRouterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getRouter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeRouterProtocol?, Movies.HomeRouterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setRouter(_ newValue: @escaping @autoclosure () -> Movies.HomeRouterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeRouterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked view

  override public var `view`: Movies.HomeViewProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getView() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomeViewProtocol?, Movies.HomeViewProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setView(_ newValue: @escaping @autoclosure () -> Movies.HomeViewProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomeViewProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `interactorGetMovie`()

  public override func `interactorGetMovie`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `interactorGetMovie`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `interactorDidFetchMoviesError`(`error`: Error)

  public override func `interactorDidFetchMoviesError`(`error`: Error) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `interactorDidFetchMoviesError`(`error`: @escaping @autoclosure () -> Error) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Error) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `interactorDidFetchMovies`(`result`: Movies.AllMovie)

  public override func `interactorDidFetchMovies`(`result`: Movies.AllMovie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `interactorDidFetchMovies`(`result`: @escaping @autoclosure () -> Movies.AllMovie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.AllMovie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `interactorGetMovieById`(`movie`: Movies.Movie)

  public override func `interactorGetMovieById`(`movie`: Movies.Movie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `interactorGetMovieById`(`movie`: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.Movie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `HomePresenter`.
public func mock(_ type: Movies.HomePresenter.Type, file: StaticString = #file, line: UInt = #line) -> HomePresenterMock {
  return HomePresenterMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeRouterProtocol

public final class HomeRouterProtocolMock: Movies.HomeRouterProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked entry

  public var `entry`: Movies.EntryPointHome? { get { fatalError("See 'Thunk Pruning' in the README") } }

  public func getEntry() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.EntryPointHome?, Movies.EntryPointHome?> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `start`()

  public static func `start`() -> Movies.HomeRouterProtocol { fatalError("See 'Thunk Pruning' in the README") }

  public static func `start`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Movies.HomeRouterProtocol, Movies.HomeRouterProtocol> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `changeViewToDetailMovie`(`movie`: Movies.Movie)

  public func `changeViewToDetailMovie`(`movie`: Movies.Movie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `changeViewToDetailMovie`(`movie`: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.Movie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `HomeRouterProtocol`.
public func mock(_ type: Movies.HomeRouterProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> HomeRouterProtocolMock {
  return HomeRouterProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeRouter

public final class HomeRouterMock: Movies.HomeRouter, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked entry

  override public var `entry`: Movies.EntryPointHome? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getEntry() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.EntryPointHome?, Movies.EntryPointHome?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setEntry(_ newValue: @escaping @autoclosure () -> Movies.EntryPointHome?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.EntryPointHome?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `changeViewToDetailMovie`(`movie`: Movies.Movie)

  public override func `changeViewToDetailMovie`(`movie`: Movies.Movie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `changeViewToDetailMovie`(`movie`: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.Movie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `HomeRouter`.
public func mock(_ type: Movies.HomeRouter.Type, file: StaticString = #file, line: UInt = #line) -> HomeRouterMock {
  return HomeRouterMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked HomeTableViewCell

public final class HomeTableViewCellMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'HomeTableViewCell' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: Movies.HomeTableViewCell.Type, file: StaticString = #file, line: UInt = #line) -> HomeTableViewCellMock {
  fatalError()
}

// MARK: - Mocked HomeViewController

public final class HomeViewControllerMock: Movies.HomeViewController, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public enum InitializerProxy {
    public static func initialize(`coder`: NSCoder, __file: StaticString = #file, __line: UInt = #line) -> HomeViewControllerMock? { fatalError("See 'Thunk Pruning' in the README") }

    public static func initialize(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?, __file: StaticString = #file, __line: UInt = #line) -> HomeViewControllerMock { fatalError("See 'Thunk Pruning' in the README") }
  }

  // MARK: Mocked homeTableView

  override public var `homeTableView`: UITableView! { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getHomeTableView() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> UITableView, UITableView> { fatalError("See 'Thunk Pruning' in the README") }

  public func setHomeTableView(_ newValue: @escaping @autoclosure () -> UITableView) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (UITableView) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked presenter

  override public var `presenter`: Movies.HomePresenterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPresenter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomePresenterProtocol?, Movies.HomePresenterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPresenter(_ newValue: @escaping @autoclosure () -> Movies.HomePresenterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomePresenterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `viewDidLoad`()

  public override func `viewDidLoad`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `viewDidLoad`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `updateMoviesError`(`with` `error`: Error)

  public override func `updateMoviesError`(`with` `error`: Error) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `updateMoviesError`(`with` `error`: @escaping @autoclosure () -> Error) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Error) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `updateMovies`(`with` `movies`: Movies.AllMovie)

  public override func `updateMovies`(`with` `movies`: Movies.AllMovie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `updateMovies`(`with` `movies`: @escaping @autoclosure () -> Movies.AllMovie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.AllMovie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `showDetailMovie`(`movie`: Movies.Movie)

  public override func `showDetailMovie`(`movie`: Movies.Movie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `showDetailMovie`(`movie`: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.Movie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init?(`coder`: NSCoder)

  public required init?(`coder`: NSCoder) { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?)

  public required override init(`nibName` `nibNameOrNil`: String?, `bundle` `nibBundleOrNil`: Bundle?) { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns an abstract mock which should be initialized using `mock(HomeViewController.self).initialize(…)`.
public func mock(_ type: Movies.HomeViewController.Type, file: StaticString = #file, line: UInt = #line) -> HomeViewControllerMock.InitializerProxy.Type {
  return HomeViewControllerMock.InitializerProxy.self
}

// MARK: - Mocked HomeViewProtocol

public final class HomeViewProtocolMock: Movies.HomeViewProtocol, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  // MARK: Mocked presenter

  public var `presenter`: Movies.HomePresenterProtocol? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  public func getPresenter() -> Mockingbird.Mockable<Mockingbird.PropertyGetterDeclaration, () -> Movies.HomePresenterProtocol?, Movies.HomePresenterProtocol?> { fatalError("See 'Thunk Pruning' in the README") }

  public func setPresenter(_ newValue: @escaping @autoclosure () -> Movies.HomePresenterProtocol?) -> Mockingbird.Mockable<Mockingbird.PropertySetterDeclaration, (Movies.HomePresenterProtocol?) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `updateMoviesError`(`with` `error`: Error)

  public func `updateMoviesError`(`with` `error`: Error) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `updateMoviesError`(`with` `error`: @escaping @autoclosure () -> Error) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Error) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `updateMovies`(`with` `movies`: Movies.AllMovie)

  public func `updateMovies`(`with` `movies`: Movies.AllMovie) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `updateMovies`(`with` `movies`: @escaping @autoclosure () -> Movies.AllMovie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.AllMovie) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `HomeViewProtocol`.
public func mock(_ type: Movies.HomeViewProtocol.Protocol, file: StaticString = #file, line: UInt = #line) -> HomeViewProtocolMock {
  return HomeViewProtocolMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked ManagerCache

public final class ManagerCacheMock: Movies.ManagerCache, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getImageFromCache`(`forKey` `key`: String)

  public override func `getImageFromCache`(`forKey` `key`: String) -> UIImage? { fatalError("See 'Thunk Pruning' in the README") }

  public func `getImageFromCache`(`forKey` `key`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String) -> UIImage?, UIImage?> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `cleanCache`()

  public override func `cleanCache`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `cleanCache`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `saveImageInCache`(`image`: UIImage, `forKey` `key`: String)

  public override func `saveImageInCache`(`image`: UIImage, `forKey` `key`: String) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `saveImageInCache`(`image`: @escaping @autoclosure () -> UIImage, `forKey` `key`: @escaping @autoclosure () -> String) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIImage, String) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `ManagerCache`.
public func mock(_ type: Movies.ManagerCache.Type, file: StaticString = #file, line: UInt = #line) -> ManagerCacheMock {
  return ManagerCacheMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked ManagerRequestServices

public final class ManagerRequestServicesMock: Movies.ManagerRequestServices, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getALLMovies`(`completion`: @escaping Movies.COMPLETION_DATA)

  public override func `getALLMovies`(`completion`: @escaping Movies.COMPLETION_DATA) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getALLMovies`(`completion`: @escaping @autoclosure () -> Movies.COMPLETION_DATA) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (@escaping Movies.COMPLETION_DATA) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `getMovieById`(`id`: String, `completion`: @escaping Movies.COMPLETION_DATA)

  public override func `getMovieById`(`id`: String, `completion`: @escaping Movies.COMPLETION_DATA) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getMovieById`(`id`: @escaping @autoclosure () -> String, `completion`: @escaping @autoclosure () -> Movies.COMPLETION_DATA) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, @escaping Movies.COMPLETION_DATA) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `getImageByPosterPath`(`posterPath`: String, `completion`: @escaping Movies.COMPLETION_DATA)

  public override func `getImageByPosterPath`(`posterPath`: String, `completion`: @escaping Movies.COMPLETION_DATA) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `getImageByPosterPath`(`posterPath`: @escaping @autoclosure () -> String, `completion`: @escaping @autoclosure () -> Movies.COMPLETION_DATA) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, @escaping Movies.COMPLETION_DATA) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `ManagerRequestServices`.
public func mock(_ type: Movies.ManagerRequestServices.Type, file: StaticString = #file, line: UInt = #line) -> ManagerRequestServicesMock {
  return ManagerRequestServicesMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked ManagerRequest

public final class ManagerRequestMock: Movies.ManagerRequest, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? {
    get { return self.stubbingContext.sourceLocation }
    set {
      self.stubbingContext.sourceLocation = newValue
      ManagerRequestMock.staticMock.stubbingContext.sourceLocation = newValue
    }
  }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `makeRequestAlamoreFire`()

  public override func `makeRequestAlamoreFire`() -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`makeRequestAlamoreFire`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `makeRequestAlamoreFire`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`makeRequestAlamoreFire`() -> Void", arguments: [], returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `makeRequest`(`method`: Movies.METHOD_HTTP, `baseUrl`: Movies.ENPOINT_MOVIE, `endpoint`: Movies.ENPOINT_MOVIE, `params`: String, `body`: Dictionary<String, Any>?, `completion`: @escaping Movies.COMPLETION_HTTP)

  public override func `makeRequest`(`method`: Movies.METHOD_HTTP, `baseUrl`: Movies.ENPOINT_MOVIE, `endpoint`: Movies.ENPOINT_MOVIE, `params`: String, `body`: Dictionary<String, Any>?, `completion`: @escaping Movies.COMPLETION_HTTP) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`makeRequest`(`method`: Movies.METHOD_HTTP, `baseUrl`: Movies.ENPOINT_MOVIE, `endpoint`: Movies.ENPOINT_MOVIE, `params`: String, `body`: Dictionary<String, Any>?, `completion`: @escaping Movies.COMPLETION_HTTP) -> Void", arguments: [Mockingbird.ArgumentMatcher(`method`), Mockingbird.ArgumentMatcher(`baseUrl`), Mockingbird.ArgumentMatcher(`endpoint`), Mockingbird.ArgumentMatcher(`params`), Mockingbird.ArgumentMatcher(`body`), Mockingbird.ArgumentMatcher(`completion`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (Movies.METHOD_HTTP, Movies.ENPOINT_MOVIE, Movies.ENPOINT_MOVIE, String, Dictionary<String, Any>?, @escaping Movies.COMPLETION_HTTP) -> Void {
        concreteImplementation(`method`, `baseUrl`, `endpoint`, `params`, `body`, `completion`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `makeRequest`(`method`: @escaping @autoclosure () -> Movies.METHOD_HTTP, `baseUrl`: @escaping @autoclosure () -> Movies.ENPOINT_MOVIE, `endpoint`: @escaping @autoclosure () -> Movies.ENPOINT_MOVIE, `params`: @escaping @autoclosure () -> String, `body`: @escaping @autoclosure () -> Dictionary<String, Any>?, `completion`: @escaping @autoclosure () -> Movies.COMPLETION_HTTP) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.METHOD_HTTP, Movies.ENPOINT_MOVIE, Movies.ENPOINT_MOVIE, String, Dictionary<String, Any>?, @escaping Movies.COMPLETION_HTTP) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`method`), Mockingbird.resolve(`baseUrl`), Mockingbird.resolve(`endpoint`), Mockingbird.resolve(`params`), Mockingbird.resolve(`body`), Mockingbird.resolve(`completion`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`makeRequest`(`method`: Movies.METHOD_HTTP, `baseUrl`: Movies.ENPOINT_MOVIE, `endpoint`: Movies.ENPOINT_MOVIE, `params`: String, `body`: Dictionary<String, Any>?, `completion`: @escaping Movies.COMPLETION_HTTP) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.METHOD_HTTP, Movies.ENPOINT_MOVIE, Movies.ENPOINT_MOVIE, String, Dictionary<String, Any>?, @escaping Movies.COMPLETION_HTTP) -> Void, Void>(mock: self, invocation: invocation)
  }

  // MARK: Mocked `downloadImage`(`from` `posterPath`: String, `completion`: @escaping Movies.COMPLETION_DATA)

  public override func `downloadImage`(`from` `posterPath`: String, `completion`: @escaping Movies.COMPLETION_DATA) -> Void {
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`downloadImage`(`from` `posterPath`: String, `completion`: @escaping Movies.COMPLETION_DATA) -> Void", arguments: [Mockingbird.ArgumentMatcher(`posterPath`), Mockingbird.ArgumentMatcher(`completion`)], returnType: Swift.ObjectIdentifier((Void).self))
    self.mockingContext.didInvoke(invocation) { () -> Void in
      let implementation = self.stubbingContext.implementation(for: invocation)
      if let concreteImplementation = implementation as? (String, @escaping Movies.COMPLETION_DATA) -> Void {
        concreteImplementation(`posterPath`, `completion`)
      } else if let concreteImplementation = implementation as? () -> Void {
        concreteImplementation()
      }
    }
  }

  public func `downloadImage`(`from` `posterPath`: @escaping @autoclosure () -> String, `completion`: @escaping @autoclosure () -> Movies.COMPLETION_DATA) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, @escaping Movies.COMPLETION_DATA) -> Void, Void> {
    let arguments: [Mockingbird.ArgumentMatcher] = [Mockingbird.resolve(`posterPath`), Mockingbird.resolve(`completion`)]
    let invocation: Mockingbird.Invocation = Mockingbird.Invocation(selectorName: "`downloadImage`(`from` `posterPath`: String, `completion`: @escaping Movies.COMPLETION_DATA) -> Void", arguments: arguments, returnType: Swift.ObjectIdentifier((Void).self))
    return Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (String, @escaping Movies.COMPLETION_DATA) -> Void, Void>(mock: self, invocation: invocation)
  }
}

/// Returns a concrete mock of `ManagerRequest`.
public func mock(_ type: Movies.ManagerRequest.Type, file: StaticString = #file, line: UInt = #line) -> ManagerRequestMock {
  return ManagerRequestMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked RouterFacade

public final class RouterFacadeMock: Movies.RouterFacade, Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }

  fileprivate init(sourceLocation: Mockingbird.SourceLocation) {
    super.init()
    Mockingbird.checkVersion(for: self)
    self.sourceLocation = sourceLocation
  }

  // MARK: Mocked `getHometView`()

  public override func `getHometView`() -> UIKit.UIViewController { fatalError("See 'Thunk Pruning' in the README") }

  public func `getHometView`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> UIKit.UIViewController, UIKit.UIViewController> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `getHomeDetail`(`movie`: Movies.Movie)

  public override func `getHomeDetail`(`movie`: Movies.Movie) -> UIKit.UIViewController { fatalError("See 'Thunk Pruning' in the README") }

  public func `getHomeDetail`(`movie`: @escaping @autoclosure () -> Movies.Movie) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (Movies.Movie) -> UIKit.UIViewController, UIKit.UIViewController> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `getNavegationController`()

  public override func `getNavegationController`() -> UINavigationController { fatalError("See 'Thunk Pruning' in the README") }

  public func `getNavegationController`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> UINavigationController, UINavigationController> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `backNavigationController`()

  public override func `backNavigationController`() -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `backNavigationController`() -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, () -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `pushNavigationController`(`view`: UIKit.UIViewController)

  public override func `pushNavigationController`(`view`: UIKit.UIViewController) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `pushNavigationController`(`view`: @escaping @autoclosure () -> UIKit.UIViewController) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIKit.UIViewController) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `setRootViewController`(`view`: UIKit.UIViewController)

  public override func `setRootViewController`(`view`: UIKit.UIViewController) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `setRootViewController`(`view`: @escaping @autoclosure () -> UIKit.UIViewController) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIKit.UIViewController) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }

  // MARK: Mocked `backNavigationController`(`to` `viewController`: UIKit.UIViewController)

  public override func `backNavigationController`(`to` `viewController`: UIKit.UIViewController) -> Void { fatalError("See 'Thunk Pruning' in the README") }

  public func `backNavigationController`(`to` `viewController`: @escaping @autoclosure () -> UIKit.UIViewController) -> Mockingbird.Mockable<Mockingbird.FunctionDeclaration, (UIKit.UIViewController) -> Void, Void> { fatalError("See 'Thunk Pruning' in the README") }
}

/// Returns a concrete mock of `RouterFacade`.
public func mock(_ type: Movies.RouterFacade.Type, file: StaticString = #file, line: UInt = #line) -> RouterFacadeMock {
  return RouterFacadeMock(sourceLocation: Mockingbird.SourceLocation(file, line))
}

// MARK: - Mocked SceneDelegate

public final class SceneDelegateMock: Mockingbird.Mock {
  static let staticMock = Mockingbird.StaticMock()
  public let mockingContext = Mockingbird.MockingContext()
  public let stubbingContext = Mockingbird.StubbingContext()
  public let mockMetadata = Mockingbird.MockMetadata(["generator_version": "0.16.0", "module_name": "Movies"])
  public var sourceLocation: Mockingbird.SourceLocation? { get { fatalError("See 'Thunk Pruning' in the README") } set { fatalError("See 'Thunk Pruning' in the README") } }
}

@available(*, unavailable, message: "'SceneDelegate' does not declare any accessible designated initializers and cannot be mocked")
public func mock(_ type: Movies.SceneDelegate.Type, file: StaticString = #file, line: UInt = #line) -> SceneDelegateMock {
  fatalError()
}
